
const vmSeries = processTimeSeries({
  timeSeries: timeSeries,
  nullValueMode: NullValueMode.Ignore,
});

onBigTextChanged = evt => {
    this.props.onChange({
      ...this.props.options,
      bigText: evt.target.value,
    });
  };

  render() {
    return (
      <PanelOptionsGroup title="My options">
        <FormField label="Big text" onChange={this.onBigTextChanged} />
      </PanelOptionsGroup>
    );
  }

// Big text
export class MyPanel extends PureComponent<PanelProps<MyPanelOptions>> {
  render() {
    const { options } = this.props;
    const { timeSeries } = this.props.panelData;

    const maxValue = _.maxBy(timeSeries[0].datapoints, v => v[0])[0];
    const formatFunc = getValueFormat('ms');

    return (
      <div className="center-vh">
        <h1 style={{ fontSize: '80px' }}>{options.bigText}</h1>
        <h2>Max: {formatFunc(maxValue)}</h2>
      </div>
    );
  }
}

    const thresholds = [{ index: 0, value: -Infinity, color: 'green' }, { index: 0, value: 80, color: 'red' }];
 
    <Gauge width={200} height={300} unit="ms" value={maxValue} thresholds={thresholds} />